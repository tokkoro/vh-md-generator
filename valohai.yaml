- step:
    name: compute-clusters
    image: python
    command:
    - python train.py {parameters}
    parameters:
    - name: how_random
      description: How random you want the metadata to be
      type: float
      default: 0.05
    - name: epochs
      description: How many epochs do you want?
      type: integer
      default: 10
    - name: wait_time
      description: How long to wait between generated metadata (seconds)
      type: float
      default: 1
    inputs:
    - name: sim_input
      optional: false
    - name: elt_sales_input
      optional: false
- step:
    name: elt-data
    image: python
    command:
    - python train.py {parameters}
    parameters:
    - name: how_random
      description: How random you want the metadata to be
      type: float
      default: 0.05
    - name: epochs
      description: How many epochs do you want?
      type: integer
      default: 10
    - name: wait_time
      description: How long to wait between generated metadata (seconds)
      type: float
      default: 1
- step:
    name: sim-metric-model
    image: python
    command:
    - python train.py {parameters}
    parameters:
    - name: how_random
      description: How random you want the metadata to be
      type: float
      default: 0.05
    - name: epochs
      description: How many epochs do you want?
      type: integer
      default: 10
    - name: wait_time
      description: How long to wait between generated metadata (seconds)
      type: float
      default: 1
    inputs:
      - name: elt_sales_input
        optional: false
      - name: elt_asmt_input
        optional: false
- step:
    name: write-results
    image: python
    command:
    - python train.py {parameters}
    parameters:
      - name: how_random
        description: How random you want the metadata to be
        type: float
        default: 0.05
      - name: epochs
        description: How many epochs do you want?
        type: integer
        default: 10
      - name: wait_time
        description: How long to wait between generated metadata (seconds)
        type: float
        default: 1
    inputs:
    - name: sim_input
      optional: false
    - name: cluster_input
      optional: false
- pipeline:
    name: Store Similarity
    edges:
    - configuration: {}
      source: elt-node.output.output_file.txt
      target: sim-metric-node.input.elt_sales_input
    - configuration: {}
      source: elt-node.output.output_file.txt
      target: sim-metric-node.input.elt_asmt_input
    - configuration: {}
      source: sim-metric-node.output.output_file.txt
      target: cluster-node.input.sim_input
    - configuration: {}
      source: elt-node.output.output_file.txt
      target: cluster-node.input.elt_sales_input
    - configuration: {}
      source: cluster-node.output.output_file.txt
      target: results-node.input.cluster_input
    - configuration: {}
      source: sim-metric-node.output.output_file.txt
      target: results-node.input.sim_input
    nodes:
    - name: elt-node
      override: {}
      step: elt-data
      type: execution
    - name: sim-metric-node
      override: {}
      step: sim-metric-model
      type: execution
    - name: cluster-node
      override: {}
      step: compute-clusters
      type: execution
    - name: results-node
      override: {}
      step: write-results
      type: execution
- step:
    name: preprocess
    image: python:3.10
    command:
      - python ./output_pipeline_task_storeid.py
- step:
    name: train
    image: python:3.10
    command:
      - pip install valohai-utils
      - python ./input_pipeline_task_storeid.py {parameters}
    parameters:
    - name: id
      type: string
- pipeline:
    name: task pipeline
    nodes:
    - name: preprocess
      step: preprocess
      type: execution
    - name: train
      step: train
      type: task
    edges:
    - [preprocess.metadata.storeids, train.parameter.id]